import java.rmi.*;
import java.rmi.server.*;
import java.util.*;

public class MatrixMultiplicationServer extends UnicastRemoteObject implements MatrixMultiplication {
    
    // Constructor
    public MatrixMultiplicationServer() throws RemoteException {
        super();
    }

    // Method to multiply two submatrices
    @Override
    public int[][] multiplySubmatrix(int[][] submatrixA, int[][] submatrixB) throws RemoteException {
        int rowsA = submatrixA.length;
        int colsA = submatrixA[0].length;
        int colsB = submatrixB[0].length;

        // Result matrix
        int[][] result = new int[rowsA][colsB];

        // Matrix multiplication
        for (int i = 0; i < rowsA; i++) {
            for (int j = 0; j < colsB; j++) {
                for (int k = 0; k < colsA; k++) {
                    result[i][j] += submatrixA[i][k] * submatrixB[k][j];
                }
            }
        }
        return result;
    }

    // Method to combine submatrix results into the final matrix
    @Override
    public int[][] combineResults(List<int[][]> submatrixResults, int rows, int cols) throws RemoteException {
        int[][] resultMatrix = new int[rows][cols];
        int submatrixRows = submatrixResults.get(0).length;
        int submatrixCols = submatrixResults.get(0)[0].length;

        // Combine the submatrices into the result
        int index = 0;
        for (int i = 0; i < rows; i += submatrixRows) {
            for (int j = 0; j < cols; j += submatrixCols) {
                int[][] submatrix = submatrixResults.get(index++);
                for (int m = 0; m < submatrixRows; m++) {
                    for (int n = 0; n < submatrixCols; n++) {
                        resultMatrix[i + m][j + n] = submatrix[m][n];
                    }
                }
            }
        }
        return resultMatrix;
    }

    public static void main(String[] args) {
        try {
            MatrixMultiplicationServer server = new MatrixMultiplicationServer();
            Registry registry = LocateRegistry.createRegistry(1099);
            registry.rebind("MatrixMultiplicationService", server);
            System.out.println("Matrix Multiplication Server is ready...");
        } catch (Exception e) {
            System.err.println("Server exception: " + e.toString());
            e.printStackTrace();
        }
    }
}
